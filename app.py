# -*- coding: utf-8 -*-
"""Week1-Road Lane Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hn1tdyJ6qDhm0nt2sQEGjLAwNK9b18qi
"""

import cv2
import numpy as np

def canny(image):
  gray_image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
  canny_image = cv2.Canny(gray_image, 100, 200)
  return canny_image

def region_of_interest(img, vertices): 
    mask = np.zeros_like(img) 
    #channel_count=img.shape[2]         
    match_mask_color= 255
    cv2.fillPoly(mask,vertices,match_mask_color)
    masked_image=cv2.bitwise_and(img,mask) 
    return masked_image

def hough_lines_detection(img, rho, theta, threshold, maxLineGap):
  # detect lines in the image using hough lines technique
  lines = cv2.HoughLinesP(img, rho, theta, threshold, maxLineGap)
  return lines

def draw_lines(output_img, lines):
  # iterate over the output lines and draw them
  for line in lines:
      for x1, y1, x2, y2 in line:
          cv2.line(output_img, (x1, y1), (x2, y2), (20, 220, 20), 3)
  return output_img

def save_img(path, output_img):
    cv2.imwrite(path, output_img)

def run_cv(src, dst):
    image = cv2.imread(src)

    height=image.shape[0]
    width=image.shape[1]

    region_of_interest_coor=[(0,height),
                            (width/2,height/2),
                            (width,height)]
    
    canny_image = canny(image)
    cropped_image=region_of_interest(canny_image,
                                    np.array([region_of_interest_coor], np.int32))
    houghlines = hough_lines_detection(cropped_image, 1, np.pi/180, 30, 50)
    output_img = draw_lines(image, houghlines)
    save_img(dst, output_img)

import os, shutil
from flask import Flask, render_template, request, redirect, url_for
app = Flask(__name__)

@app.route('/', methods=['GET','POST'])
def index():
    if(request.method == 'GET'):
        return render_template('index.html')
    elif(request.method == 'POST'):
        src = 'static/src.jpg'
        dst = 'static/output_img.jpg'
        image = request.files['image']
        image.save(src)
        run_cv(src, dst)
        return redirect(url_for('output'))

@app.route('/result', methods=['GET'])
def output():
    return render_template('output.html')

if __name__ == '__main__':
    os.makedirs('static', exist_ok=True)
    app.run(host='0.0.0.0', port=5000)
    shutil.rmtree('static')